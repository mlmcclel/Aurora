# Builds a metal lib from all the Metal files in the provided folder.
# Then packs the lib into an array in a C++ header.

import glob
import os
import shutil
import sys
import re
import subprocess
import math
import platform

# Dump usage and exit if we have incorrect number of args.
if(len(sys.argv) != 3):
    print("Usage: python3 minifyMetalShaders.py inputFolder outputFile")
    print("  inputFolder - Folder containing Metal files")
    print("  outputMinifiedFile - Output minified C++ header file")
    sys.exit(-1)

# Parse the command line arguments.
metalFolder = sys.argv[1]
outputFile  = sys.argv[2]
nameSpaceName = os.path.splitext(os.path.basename(outputFile))[0] # Default namespace is output filename without extension or path.

# Build list of files
files = glob.glob(metalFolder + '/*.metal')

# See if any of the Metal files are newer than output header file.
try:
    outfileStat = os.stat(outputFile)
    outputModTime = outfileStat.st_mtime
except:
    outputModTime = 0

# Compare the modified date on all the Metal files in folder to output header file.
numFiles = len(files)
n = 0
rebuildNeeded = False
entryPointFiles = [metalFolder + "/MainEntryPoints.metal", 
                   metalFolder + "/PostProcessing.metal", 
                   metalFolder + "/Accumulation.metal"]
for metalFile in files:
    fileModTime = os.stat(metalFile).st_mtime
    if(fileModTime > outputModTime):
        rebuildNeeded = True

# Early out, if nothing to be done.
if(not rebuildNeeded):
    print("Nothing to be done, output header file %s up to date" % (outputFile))
    sys.exit(0)

print("Compiling to MetalLib in header ", outputFile)
compiledTempFile = outputFile + ".metallib"
variableName = "g_sAuroraMetalLib"

# TODO: omit -frecord-sources and -gline-tables-only for release builds
# Can add -fno-fast-math to turn off fast math
cmd = ["xcrun", "metal"] + entryPointFiles + ["-o", compiledTempFile, "-frecord-sources", "-gline-tables-only"]

result = subprocess.run(cmd, capture_output=True)
if(result.returncode != 0):
    print("Compliation failed: " + result.stderr.decode())
    sys.exit(-1)

try:
    f = open(compiledTempFile, mode = "rb")
except:
    print("Failed to open input metal lib: " + compiledTempFile)
    sys.exit(-1)

data = bytearray(f.read())
numBytes = len(data)

# using a list of strings is significantly faster than repeated string concatenation
# .join is much faster than repeated growing strings
headerLines = []
headerLines.append("  static const array<unsigned char, " + str(numBytes) + "> " + variableName + " = {\n    ")
for i, byte in enumerate(data):
    headerLines.append(f"0x{byte:02X}")
    if i < numBytes - 1:
        headerLines.append(", ")
    if i % 16 == 15:
        headerLines.append("\n    ")
headerLines.append("\n  };\n")
headerStr = "".join(headerLines)

try:
    headerOutput = open(outputFile, "w")
except:
    print("Failed to open output header: " + outputFile)
    sys.exit(-1)

# Begin header file with namespace
headerOutput.write('// Minified Metal Library header file.\n// Automatically generated by ' + sys.argv[0] + ' from ' + str(numFiles) + ' files in folder ' + metalFolder + '\n')
headerOutput.write('namespace ' + nameSpaceName + ' {\n')

headerOutput.write(headerStr)

# End namespace
headerOutput.write("}\n")
# Close header file.
headerOutput.close()
